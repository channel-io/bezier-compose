@file:Suppress("ObjectPropertyName", "UnusedReceiverParameter")

// Auto-generated by script/generate_compose_bezier_icon.py

package io.channel.bezier.compose.icon

import androidx.compose.foundation.layout.size
import androidx.compose.material3.Icon
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.*
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.graphics.vector.path
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import io.channel.bezier.compose.BezierIcon

val BezierIcon.Play: ImageVector
    get() {
        return _play ?: ImageVector.Builder(
                name = "Play",
                defaultWidth = 24.dp,
                defaultHeight = 24.dp,
                viewportWidth = 24f,
                viewportHeight = 24f,
        ).apply {
            path(
                    fill = SolidColor(Color(0xFF313234)),
                    strokeLineWidth = 1f,
                    pathFillType = PathFillType.EvenOdd,
            ) {
                moveTo(20.1456f, 11.3897f)
                curveTo(20.5643f, 11.6888f, 20.5643f, 12.3112f, 20.1456f, 12.6103f)
                lineTo(8.1859f, 21.1529f)
                curveTo(7.6895f, 21.5075f, 7.0f, 21.1526f, 7.0f, 20.5426f)
                lineTo(7.0f, 3.4574f)
                curveTo(7.0f, 2.8474f, 7.6895f, 2.4925f, 8.1859f, 2.8471f)
                lineTo(20.1456f, 11.3897f)
                close()
            }
        }.build().also {
            _play = it
        }
    }

private var _play: ImageVector? = null

@Preview(showBackground = true)
@Composable
private fun PlayIconPreview() {
    Icon(
            modifier = Modifier.size(128.dp),
            imageVector = BezierIcon.Play,
            contentDescription = null,
    )
}
