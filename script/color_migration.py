# xml 컬러를 kt 컬러로 변경하기 위한 스크립트입니다
# 색상이 변경되는 경우에만 실행해야 하며, 자동 실행되면 안됩니다

import xml.etree.ElementTree as ElementTree
import os


def underscore_to_camelcase(text):
    return ''.join(word.title() if i else word for i, word in enumerate(text.split('_')))

# file_name > file_path > parent_path (ch-desk-android)
root_path = os.path.abspath(os.path.join(os.path.realpath(__file__), "..", ".."))

color_palette_xml = os.path.join(root_path, "bezier/src/main/res/values/color_palettes.xml")
light_color_xml = os.path.join(root_path, "bezier/src/main/res/values/colors.xml")
dark_color_xml = os.path.join(root_path, "bezier/src/main/res/values-night/colors.xml")

f = open(os.path.join(root_path, "bezier/src/main/java/io/channel/bezier/color/Colors.kt"), 'w')

f.write("""package io.channel.bezier.color

import androidx.compose.ui.graphics.Color

/* Generated by /script/color_migration.py */

class Colors(
""")

for child in ElementTree.parse(light_color_xml).getroot():
    f.write('        val {}: Color,\n'.format(underscore_to_camelcase(child.attrib['name'])))
f.write(')\n\n')


f.write('internal fun lightColors(): Colors = Colors(\n')
for child in ElementTree.parse(light_color_xml).getroot():
    color_code = child.text.strip().replace('@color/', '').split('_')

    if len(color_code) == 1:
        f.write('        {} = {},\n'.format(underscore_to_camelcase(child.attrib['name']), color_code[0].capitalize()))
    else:
        f.write('        {} = {}.copy(alpha = 0.{:0>2}f),\n'.format(underscore_to_camelcase(child.attrib['name']), color_code[0].capitalize(), color_code[1]))
f.write(')\n\n')


f.write('internal fun darkColors(): Colors = Colors(\n')
for child in ElementTree.parse(dark_color_xml).getroot():
    color_code = child.text.strip().replace('@color/', '').split('_')

    if len(color_code) == 1:
        f.write('        {} = {},\n'.format(underscore_to_camelcase(child.attrib['name']), color_code[0].capitalize()))
    else:
        f.write('        {} = {}.copy(alpha = 0.{:0>2}f),\n'.format(underscore_to_camelcase(child.attrib['name']), color_code[0].capitalize(), color_code[1]))
f.write(')\n\n')


# base color values
base_colors = []
for child in ElementTree.parse(color_palette_xml).getroot():
    if '_' not in child.attrib['name']:
      f.write('internal val {} = Color(0xFF{})\n'.format(child.attrib['name'].capitalize(), child.text[-6:]))
f.write('\n')

f.close()
